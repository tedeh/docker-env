#!/bin/bash

DOCKER_ENV_PATH=${DOCKER_ENV_PATH:-"/../"}

# Special case for getting the args of a command
if [ "$2" == "args" ]; then
  DOCKER_GET_ARGS="1"
  set -- "${@:1:1}" "${@:3:9}";
fi

case $DOCKER_ENV_PATH in

 # Absolute path
 /*)
   BASE=$DOCKER_ENV_PATH
   ;;

 # Relative path
 *) 
   BASE=$(dirname $(readlink -m $0))/$DOCKER_ENV_PATH
   ;;

esac

DOCKER_ENVIRONMENT_NAME=${DOCKER_ENVIRONMENT:-"development"}

# Default envs for all names
DOCKER_DEFAULT_ENV="$BASE/default/env"

if [ ! -f $DOCKER_DEFAULT_ENV ]; then
  printf "Default environment does not exist: $DOCKER_DEFAULT_ENV\n"
  exit 1
fi

. $DOCKER_DEFAULT_ENV

# Image name is the first argument
DOCKER_NAME=$1

if [ -z $DOCKER_NAME ]; then
  printf "Usage: $0 {name}\n"
  exit 1
fi

# Default envs for this name
DOCKER_NAME_DEFAULT_ENV=$(readlink -f "$BASE/default/$DOCKER_NAME")

if [ ! -f $DOCKER_NAME_DEFAULT_ENV ]; then
  printf "Default environment for $DOCKER_NAME does not exist: $DOCKER_NAME_DEFAULT_ENV\n"
  exit 1
fi

. $DOCKER_NAME_DEFAULT_ENV

# Extra envs for this name depending on environment
DOCKER_NAME_ENVIRONMENT_ENV=$(readlink -f "$BASE/$DOCKER_ENVIRONMENT_NAME/$DOCKER_NAME")

if [ -f $DOCKER_NAME_ENVIRONMENT_ENV ]; then
  . $DOCKER_NAME_ENVIRONMENT_ENV
fi

# Takes variables, return 1 if not set
check_variables() {
  for VAR in "$@"; do
    if [ -z "$VAR" ]; then
      return 1
    fi
  done
}

eval_or_print() {

  if [ "$DOCKER_GET_ARGS" == "1" ]; then
    printf "$1\n"
  else
    printf "$1\n"
    eval $1
  fi

}

check_variables $DOCKER_IMAGE_TAG || exit 1

case "$2" in

  # Prints environment as loaded
  env)
    printf "ENV\n"
    printf "USE $DOCKER_DEFAULT_ENV\n"
    printf "USE $DOCKER_NAME_DEFAULT_ENV\n"
    if [ -f $DOCKER_NAME_ENVIRONMENT_ENV ]; then
      printf "USE $DOCKER_NAME_ENVIRONMENT_ENV\n"
    else
      printf "NOT $DOCKER_NAME_ENVIRONMENT_ENV\n"
    fi
    ;;
    

  # Builds an image
  build)
    DOCKER_BUILD_ARGS=${DOCKER_BUILD_ARGS:-$3}
    printf "BUILD $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG\n"
    DOCKER_EVAL="docker build $DOCKER_BUILD_ARGS -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG $BASE/../$DOCKER_NAME"
    eval_or_print "$DOCKER_EVAL"
    RETVAL=$?
    if [ $RETVAL -eq 0 ]; then
      DOCKER_EVAL="docker tag $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG $DOCKER_IMAGE_NAME:latest"
      eval_or_print "$DOCKER_EVAL"
      if [ -n $DOCKER_IMAGE_EXTRA_TAG ]; then
        DOCKER_EVAL="docker tag $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_EXTRA_TAG"
        eval_or_print "$DOCKER_EVAL"
    fi

    fi
    ;;

  # Run
  run)
    DOCKER_RUN_CMD=${DOCKER_RUN_CMD_OVERRIDE:-$3}
    check_variables $DOCKER_RUN_ARGS $DOCKER_RUN_NAME || exit 1
    DOCKER_EVAL="docker run $DOCKER_RUN_ARGS --name $DOCKER_RUN_NAME $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG $DOCKER_RUN_CMD"
    printf "RUN $1\n"
    eval_or_print "$DOCKER_EVAL"
    ;;

  # stop, rm, run
  rerun)
    eval $0 $1 stop
    eval $0 $1 rm
    eval $0 $1 run '$3' '$4'
    ;;

  # Stop
  stop)
    check_variables $DOCKER_RUN_NAME || exit 1
    printf "STOP $DOCKER_RUN_NAME\n"
    eval docker stop $DOCKER_RUN_NAME 1>/dev/null
    exit $?
    ;;

  # Start
  start)
    check_variables $DOCKER_RUN_NAME || exit 1
    printf "START $DOCKER_RUN_NAME\n"
    eval docker start $DOCKER_RUN_NAME 1>/dev/null
    exit $?
    ;;

  # Restart
  restart)
    check_variables $DOCKER_RUN_NAME || exit 1
    printf "RESTART $DOCKER_RUN_NAME\n"
    eval docker restart $DOCKER_RUN_NAME 1>/dev/null
    exit $?
    ;;

  # Remove
  rm)
    check_variables $DOCKER_RUN_NAME || exit 1
    printf "RM $DOCKER_RUN_NAME\n"
    eval docker rm $DOCKER_RUN_NAME 1>/dev/null
    exit $?
    ;;

  # Stop and remove
  stop_rm)
    eval $0 $1 stop || exit 1
    eval $0 $1 rm || exit 1
    ;;

  # Logs
  logs)
    check_variables $DOCKER_RUN_NAME || exit 1
    printf "LOG $DOCKER_RUN_NAME\n"
    eval docker logs -f $DOCKER_RUN_NAME
    exit $?
    ;;

  # Console
  console)
    check_variables $DOCKER_CONSOLE_CMD || exit 1
    printf "CONSOLE $DOCKER_RUN_NAME\n"
    eval docker run --rm -t -i --link $DOCKER_RUN_NAME:$DOCKER_RUN_NAME $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG $DOCKER_CONSOLE_CMD
    exit $?
    ;;

  # Shell
  shell)
    printf "SHELL $DOCKER_RUN_NAME\n"
    eval docker run --rm -t -i $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG /bin/bash
    exit $?
    ;;

  # Exec
  exec)
    printf "EXEC $DOCKER_RUN_NAME\n"
    eval docker exec -t -i $DOCKER_RUN_NAME /bin/bash
    exit $?
    ;;

  # Test routine
  test)
    check_variables $DOCKER_TEST_RUN_CMD $DOCKER_TEST_RUN_NAME || exit 1
    printf "TEST $DOCKER_TEST_RUN_NAME"
    eval docker rm $DOCKER_TEST_RUN_NAME &>/dev/null
    eval docker run $DOCKER_TEST_RUN_ARGS --name $DOCKER_TEST_RUN_NAME $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG $DOCKER_TEST_RUN_CMD
    exit $?
    ;;

	*)
		echo "Usage: $0 {name} {build|run|args|stop|start|restart|rm|stop_rm|logs|console|test|shell|exec}"
		exit 1
		;;

esac

exit 0
